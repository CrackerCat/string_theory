/*  Copyright (c) 2016 Michael Hansen

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE. */

#ifndef _ST_CONFIG_H
#define _ST_CONFIG_H

#define ST_MAJOR_VERSION @ST_MAJOR_VERSION@
#define ST_MINOR_VERSION @ST_MINOR_VERSION@
#define ST_VERSION ((ST_MAJOR_VERSION * 100) + ST_MINOR_VERSION)
#define ST_VERSION_STR "@ST_VERSION@"

#cmakedefine ST_HAVE_NOEXCEPT
#cmakedefine ST_HAVE_OVERRIDE
#cmakedefine ST_HAVE_NULLPTR
#cmakedefine ST_HAVE_STATIC_ASSERT
#cmakedefine ST_HAVE_RVALUE_MOVE
#cmakedefine ST_HAVE_CHAR_TYPES
#cmakedefine ST_HAVE_STD_USTRING_TYPES
#cmakedefine ST_HAVE_USER_LITERALS
#cmakedefine ST_HAVE_INT64
#cmakedefine ST_HAVE_DELETED_FUNC
#cmakedefine ST_HAVE_VARARG_TEMPLATE
#cmakedefine ST_HAVE_LAMBDA_EXPR
#cmakedefine ST_HAVE_TYPE_TRAITS
#cmakedefine ST_HAVE_CONSTEXPR
#cmakedefine ST_HAVE_DEPRECATED_ATTR
#cmakedefine ST_INT64_IS_LONG
#if (__cplusplus > 201402L) || (defined(_MSVC_LANG) && (_MSVC_LANG > 201402L))
#cmakedefine ST_HAVE_CXX17_STRING_VIEW
#cmakedefine ST_HAVE_EXPERIMENTAL_STRING_VIEW
#cmakedefine ST_HAVE_CXX17_FILESYSTEM
#cmakedefine ST_HAVE_EXPERIMENTAL_FILESYSTEM
#endif
#cmakedefine ST_HAVE_FORMAT
#cmakedefine ST_NO_STL_STRINGS
#if (__cplusplus > 201703L) || (defined(_MSVC_LANG) && (_MSVC_LANG > 201703L))
#cmakedefine ST_HAVE_CXX20_CHAR8_TYPES
#endif

#cmakedefine01 ST_BUILD_SHARED

#ifdef ST_HAVE_NOEXCEPT
#   define ST_NOEXCEPT noexcept
#else
#   define ST_NOEXCEPT throw()
#endif

#ifdef ST_HAVE_OVERRIDE
#   define ST_OVERRIDE override
#else
#   define ST_OVERRIDE
#endif

#ifdef ST_HAVE_NULLPTR
#   define ST_NULLPTR nullptr
#else
#   define ST_NULLPTR 0
#endif

#define _ST_MACRO_JOIN(l, r)  l ## r
#define ST_MACRO_JOIN(l, r)   _ST_MACRO_JOIN(l, r)

#ifdef ST_HAVE_STATIC_ASSERT
#   define ST_STATIC_ASSERT(x, msg) static_assert((x), msg);
#else
namespace _ST_PRIVATE
{
    template<bool> struct static_assertion;
    template<> struct static_assertion<true> {};
}
#   define ST_STATIC_ASSERT(x, msg) \
        enum { ST_MACRO_JOIN(_ST_static_assertion_, __LINE__) = \
                sizeof(_ST_PRIVATE::static_assertion<static_cast<bool>(x)>) };
#endif

#ifndef ST_HAVE_CHAR_TYPES
    typedef unsigned short  char16_t;
    typedef unsigned int    char32_t;
#endif

#ifdef ST_HAVE_DELETED_FUNC
#   define ST_DISABLE_COPY(name) \
        name(const name &) = delete; \
        void operator=(const name &) = delete;
#else
#   define ST_DISABLE_COPY(name) \
    private: \
        name(const name &) { } \
        void operator=(const name &) { }
#endif

#ifdef ST_HAVE_CONSTEXPR
#   define ST_STRONG_ENUM(name) enum class name
#   define ST_ENUM_CONSTANT(type, name) constexpr type name = type::name
#else
#   define ST_STRONG_ENUM(name) enum name
#   define ST_ENUM_CONSTANT(type, name)
#endif

#ifdef _LIBCPP_VERSION
#   if defined(ST_HAVE_CXX17_FILESYSTEM) && defined(ST_HAVE_EXPERIMENTAL_FILESYSTEM)
        // This is a typedef in libc++
#       undef ST_HAVE_EXPERIMENTAL_FILESYSTEM
#   endif
#endif

#if defined(_MSC_VER)
#   define ST_DEPRECATED(message) __declspec(deprecated(message))
#elif defined(__GNUC__)
#   if (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR > 4))
#       define ST_DEPRECATED(message) __attribute__((deprecated(message)))
#   else
#       define ST_DEPRECATED(message) __attribute__((deprecated))
#   endif
#elif defined(ST_HAVE_DEPRECATED_ATTR)
#   define ST_DEPRECATED(message) [[deprecated(message)]]
#else
#   define ST_DEPRECATED(message)
#endif

#if defined(ST_NO_2_0_DEPRECATION)
#   define ST_DEPRECATED_IN_2_0(message)
#else
#   define ST_DEPRECATED_IN_2_0(message) ST_DEPRECATED(message)
#endif

#define ST_WCHAR_BYTES          (@ST_WCHAR_BYTES@)
#define ST_SIZET_BYTES          (@ST_SIZET_BYTES@)
#define ST_SHORT_STRING_LEN     (16)
#define ST_STACK_STRING_LEN     (256)

// MSVC doesn't provide ssize_t
#ifdef _MSC_VER
#   ifdef _WIN64
        typedef __int64 ST_ssize_t;
#   else
        typedef int ST_ssize_t;
#   endif
#else
#   include <sys/types.h>
    typedef ssize_t ST_ssize_t;
#endif

#if ST_BUILD_SHARED && defined(_WIN32)
#   ifdef ST_BUILD_EXPORTS
#       define ST_EXPORT __declspec(dllexport)
#   else
#       define ST_EXPORT __declspec(dllimport)
#   endif
#else
#   define ST_EXPORT
#endif

#endif // _ST_CONFIG_H
