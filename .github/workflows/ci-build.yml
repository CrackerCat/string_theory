name: CI-Build
on:
  push:
    branches: [master]
  pull_request:

jobs:
  build-ubuntu:
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      matrix:
        cfg:
          - { os: ubuntu-16.04, compiler: gcc-4.8,    stdlib: default }
          - { os: ubuntu-16.04, compiler: gcc,        stdlib: default }   # GCC 5
          - { os: ubuntu-16.04, compiler: clang-3.5,  stdlib: libc++  }
          - { os: ubuntu-16.04, compiler: clang,      stdlib: libc++  }   # Clang 3.8
          - { os: ubuntu-18.04, compiler: gcc,        stdlib: default }   # GCC 7
          - { os: ubuntu-18.04, compiler: clang,      stdlib: libc++  }   # Clang 6
          - { os: ubuntu-20.04, compiler: gcc,        stdlib: default }   # GCC 9
          - { os: ubuntu-20.04, compiler: clang,      stdlib: default }   # Clang 10
    steps:
      - uses: actions/checkout@v1
      - name: Install Compiler
        run: |
          sudo apt update
          if [[ "${{ matrix.cfg.compiler }}" =~ ^gcc.*$ ]]; then
            gxx=$(echo "${{ matrix.cfg.compiler }}" | sed -e 's,gcc,g++,')
            sudo apt install "$gxx"
          else
            sudo apt install "${{ matrix.cfg.compiler }}"
          fi
          if [[ "${{ matrix.cfg.stdlib }}" == "libc++" ]]; then
            sudo apt install libc++-dev libc++abi-dev
          fi
      - name: Build and Test
        run: |
          export CC="${{ matrix.cfg.compiler }}"
          export CXX="$(echo "${{ matrix.cfg.compiler }}" | sed -e 's,gcc,g++,;s,clang,clang++,')"
          if [[ "${{ matrix.cfg.stdlib }}" == "libc++" ]]; then
            export CXXFLAGS="-stdlib=libc++ -I/usr/include/libcxxabi"
          fi
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DST_BUILD_TESTS=ON ..
          make test

  build-macos:
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      matrix:
        cfg:
          - { os: macOS-10.15, xcode: Xcode_11.7 }
          - { os: macOS-10.15, xcode: Xcode_12.4 }
    steps:
      - uses: actions/checkout@v1
      - name: Build and Test
        run: |
          export PATH="/Applications/${{ matrix.cfg.xcode }}.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin:$PATH"
          export CC=clang
          export CXX=clang++
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DST_BUILD_TESTS=ON ..
          make test

  build-msvc:
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      matrix:
        cfg:
          - { os: windows-2016, msvc: Visual Studio 15 2017, arch: Win32 }
          - { os: windows-2016, msvc: Visual Studio 15 2017, arch: x64 }
          - { os: windows-2019, msvc: Visual Studio 16 2019, arch: Win32 }
          - { os: windows-2019, msvc: Visual Studio 16 2019, arch: x64 }
    steps:
      - uses: actions/checkout@v1
      - name: Build and Test
        run: |
          mkdir build
          cd build
          cmake -G "${{ matrix.cfg.msvc }}" -A ${{ matrix.cfg.arch }} -DST_BUILD_TESTS=ON ..
          cmake --build . --config Debug --target test

  build-mingw:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build and Test
        run: |
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Debug -DST_BUILD_TESTS=ON ..
          mingw32-make test

  build-msys2:
    runs-on: windows-latest
    strategy:
      matrix:
        cfg:
          - { mingw: mingw32, arch: i686 }
          - { mingw: mingw64, arch: x86_64 }
    steps:
      - uses: actions/checkout@v1
      - name: Install compiler and tools
        run: |
          $Env:Path = "C:\msys64\usr\bin;$Env:Path"
          # Already installed: mingw-w64-${{ matrix.cfg.arch }}-gcc
          #                    mingw-w64-${{ matrix.cfg.arch }}-cmake
          pacman -Sy --noconfirm mingw-w64-${{ matrix.cfg.arch }}-ninja
      - name: Build and Test
        run: |
          mkdir build
          cd build
          $Env:Path = "C:\msys64\${{ matrix.cfg.mingw }}\bin;C:\msys64\usr\bin;$Env:Path"
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DST_BUILD_TESTS=ON ..
          ninja test
